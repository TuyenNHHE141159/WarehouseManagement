@model WebApplication1.Models.OrderModel
<!DOCTYPE html>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp" crossorigin="anonymous">

<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<!-- Thư viện jQuery -->
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
<style>
    .form-control {
        width: auto;
        max-width: 300px;
    }

    tr:hover {
        background-color: #f5f5f5;
    }
</style>
<div class="container">
    @Html.Partial("~/Views/Header/Header.cshtml")
    <h1>Sửa Đơn Hàng</h1>
    <form id="order-form">
        <table style="width:100%">
            <tr>
                <td>Kiểu:</td>
                <td>
                    <input type="text" class="form-control" id="type" readonly value="@Model.SelectedItem">
                </td>
            </tr>
            <tr>
                <td><label for="product">Sản phẩm:</label></td>
                <td> <input class="form-control" type="text" id="product" placeholder="dell,pc,..."></td>
            </tr>
            <tr>
                <td><label for="price">Giá:</label></td>
                <td><input class="form-control" type="text" id="price" min="1" pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$" value="" data-type="currency" placeholder="10.000 VNĐ" required></td>
            </tr>
            <tr>
                <td>  <label for="quantity">Số lượng:</label></td>
                <td> <input class="form-control" placeholder="đơn vị sản phẩm" type="number" id="quantity" min="1" step="1" pattern="[0-9]+" required></td>
            </tr>

            <input type="hidden" id="productIdHidden" name="productIdHidden">
        </table>
        <br />
        <button type="button" class="btn btn-success" onclick="addOrder()">Thêm</button>
    </form>
    <table id="oldLisst" class="table" style="display:none">
        <thead class="table-light">
            <tr>
                <th>Sản phẩm</th>
                <th>Giá(VNĐ)</th>
                <th>Số lượng</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var o in Model.OrderDetails)
            {
                <tr>
                    <td>@o.productId</td>
                    <td>@o.quantity</td>
                    <td>@o.price</td>
                    <td>@o.total()</td>
                    <td>@Model.OrderId</td>
                </tr>
            }
        </tbody>
    </table>
    <table id="order-table" class="table" style="width:100%">
        <thead class="table-light">
            <tr>               
                <th>Sản phẩm</th>
                <th>Giá(VNĐ)</th>
                <th>Số lượng</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (index, o) in Model.OrderDetails.Select((item, index) => (index + 1, item)))
            {
                <tr>      
                    <td>@o.productName</td>
                    <td>@o.price</td>
                    <td>@o.quantity</td>
                    <td><button value="@o.productId" id="productIdDelete_@o.productId" class="btn btn-danger">Xóa</button></td>
                </tr>
            }
        </tbody>
    </table>

    Tổng tiền: <input readonly id="cost" name="cost" value="">
    <br />
    <button id="submitOrder" class="btn btn-primary">Lưu</button>
    @Html.Partial("~/Views/Footer/Footer.cshtml")
</div>
<script>
    let productList = [];

    const table = document.getElementById('oldLisst'); // get a reference to the table element
    const rows = table.getElementsByTagName('tr'); // get all rows of the table
    var totalOld=0;
    var orderId=null;
    // iterate through each row (skipping the header row)
    for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName('td'); // get the cells of the current row
        const productId = cells[0].textContent; // get the text content of the first cell
        const quantity = parseInt(cells[1].textContent); // parse the text content of the second cell as an integer
        const price = parseInt(cells[2].textContent); // parse the text content of the third cell as an integer
        totalOld += parseFloat(cells[3].textContent);
        orderId = parseInt(cells[4].textContent);
        productList.push({ productId, quantity, price }); // add an object representing the current row to the array
    }

    console.log(productList);


    const type = document.getElementById('type');
    const productIdInput = document.getElementById('product');
    const productIdInputHidden = document.getElementById('productIdHidden');
    var cost = 0;
    cost = totalOld;
    const formattedNumber1 = cost.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
    $("#cost").val(formattedNumber1);
    productIdInput.addEventListener("input", function (event) {
        const keyword = event.target.value;

        $.ajax({
            url: "/Order/GetProducts",
            type: "GET",
            data: { keyword: keyword },
            success: function (response) {
                // Xử lý kết quả trả về
                console.log(response);
                $("#product").autocomplete({
                    source: response,
                    select: function (event, ui) {
                        // Cập nhật giá trị của ô input "productId" với giá trị "label" của phần tử được chọn
                        $("#product").val(ui.item.label.trim());
                        productIdInputHidden.value = ui.item.value;
                        $("#productIdHidden").val(ui.item.value);
                        console.log(productIdInputHidden.value);
                        return false;
                    }
                });
            },
            error: function () {
                // Xử lý lỗi
                console.log("Error");
            },
        });
    });
    function addOrder() {
        // Lấy thông tin sản phẩm, giá và số lượng từ form
        var product = document.getElementById("product").value;
        var price = document.getElementById("price").value;
        priceReal = parseInt(price.replace(/,/g, ''));
        var quantity = document.getElementById("quantity").value;

        // Kiểm tra nếu có bất kỳ trường nào trống thì hiển thị thông báo và dừng hàm
        if (!product || !price || !quantity) {
            alert("Vui lòng nhập đầy đủ thông tin đơn hàng");

        }
        else if (productIdHidden.value === "") {
            document.getElementById("product").value = "";
            document.getElementById("price").value = "";
            document.getElementById("quantity").value = "";
            alert("Sản phẩm ko tồn tại");
        }
        else {
            const producto = {
                productId: productIdHidden.value,
                quantity: quantity,
                price: priceReal
            };
            console.log("Product đc thêm có id " + productIdHidden.value);
            productList.push(producto);
            // Tạo một hàng mới cho bảng
            var row = document.createElement("tr");

            // Thêm các ô cho hàng
            var productCell = document.createElement("td");
            productCell.textContent = product;
            row.appendChild(productCell);

            var priceCell = document.createElement("td");
            priceCell.textContent = price;
            row.appendChild(priceCell);

            var quantityCell = document.createElement("td");
            quantityCell.textContent = quantity;
            row.appendChild(quantityCell);

            var buttonDelete=document.createElement("button");
            buttonDelete.value = productIdHidden.value;
            buttonDelete.textContent = "Xóa";
            buttonDelete.id = "productIdDelete_" + productIdHidden.value;
            buttonDelete.className = "btn btn-danger";
            buttonDelete.addEventListener('click', function () {
                var row = this.parentNode.parentNode;
            var productDeleId = this.getAttribute("value");
            var deletedProduct = productList.find(product => product.productId === productDeleId);

            var confirmed = confirm("Bạn có chắc muốn xóa ko?");
            if (confirmed){
            row.remove();
            cost = cost - deletedProduct.quantity * deletedProduct.price;
            const formattedNumber1 = cost.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            $("#cost").val(formattedNumber1);
            console.log("Product bị xóa " + deletedProduct.productId + deletedProduct.quantity + deletedProduct.price);
            productList = productList.filter(product => product.productId !== productDeleId);      
            console.log(productList); }
                console.log(buttonDelete.value);
            });
            

            var rowButtonDeleteCell=document.createElement("td");
            rowButtonDeleteCell.appendChild(buttonDelete);
            row.appendChild(rowButtonDeleteCell);
            // Thêm hàng vào bảng
            var table = document.getElementById("order-table").getElementsByTagName("tbody")[0];
            table.appendChild(row);

            // Xóa các giá trị khỏi form
            document.getElementById("product").value = "";
            document.getElementById("price").value = "";
            document.getElementById("quantity").value = "";
            //tính tổng tiền
            cost += priceReal * quantity;
            const formattedNumber = cost.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            $("#cost").val(formattedNumber);
        }
    }
   
    $(document).ready(function () {
        // Bắt sự kiện click vào nút "Lưu"
        $("#submitOrder").click(function () {
            var confirmed = confirm("Bạn đã chắc chưa?");

            if (confirmed) {
                console.log(type.value);
                // Gửi request POST đến URL "/Order/Save" với dữ liệu là productList
                $.ajax({
                    url: "/Order/Edit",
                    type: "POST",
                    data: JSON.stringify({ orderDetails: productList, selectedItem: type.value, OrderId: orderId }),
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        // Xử lý kết quả trả về từ server (nếu cần)
                        console.log("controller trả về" + response);
                        console.log("list gửi về server" + productList);

                        alert("Sửa thành công");
                        window.location.href = "/Order/Index";
                    },
                    error: function (xhr, status, error) {
                        // Xử lý lỗi
                        alert("Lưu không thành công");
                        console.log("Lỗi: " + error);
                        console.log(xhr.responseText);
                    }
                });
            }
        });
    });

    $("input[data-type='currency']").on({
        keyup: function () {
            formatCurrency($(this));
        },
        blur: function () {
            formatCurrency($(this), "blur");
        }
    });


    function formatNumber(n) {
        // format number 1000000 to 1,234,567
        return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    }


    function formatCurrency(input, blur) {
        // appends $ to value, validates decimal side
        // and puts cursor back in right position.

        // get input value
        var input_val = input.val();

        // don't validate empty input
        if (input_val === "") { return; }

        // original length
        var original_len = input_val.length;

        // initial caret position
        var caret_pos = input.prop("selectionStart");

        // check for decimal
        if (input_val.indexOf(".") >= 0) {

            // get position of first decimal
            // this prevents multiple decimals from
            // being entered
            var decimal_pos = input_val.indexOf(".");

            // split number by decimal point
            var left_side = input_val.substring(0, decimal_pos);
            var right_side = input_val.substring(decimal_pos);

            // add commas to left side of number
            left_side = formatNumber(left_side);

            // validate right side
            right_side = formatNumber(right_side);

            // On blur make sure 2 numbers after decimal
            if (blur === "blur") {
                right_side += "00";
            }

            // Limit decimal to only 2 digits
            right_side = right_side.substring(0, 2);

            // join number by .
            input_val = left_side + "." + right_side;

        } else {
            // no decimal entered
            // add commas to number
            // remove all non-digits
            input_val = formatNumber(input_val);
            input_val = input_val;

            // final formatting
            if (blur === "blur") {
                input_val += "";
            }
        }

        // send updated string to input
        input.val(input_val);

        // put caret back in the right position
        var updated_len = input_val.length;
        caret_pos = updated_len - original_len + caret_pos;
        input[0].setSelectionRange(caret_pos, caret_pos);
    }
    var deleteButtons = document.querySelectorAll("[id^='productIdDelete_']");
    for (var i = 0; i < deleteButtons.length; i++) {
        deleteButtons[i].addEventListener("click", function () {

            var row = this.parentNode.parentNode;
            var productDeleId = this.getAttribute("value");
            var deletedProduct = productList.find(product => product.productId === productDeleId);

            var confirmed = confirm("Bạn có chắc muốn xóa ko?");
            if (confirmed){
            row.remove();
            cost = cost - deletedProduct.quantity * deletedProduct.price;
            const formattedNumber1 = cost.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            $("#cost").val(formattedNumber1);
            console.log("Product bị xóa " + deletedProduct.productId + deletedProduct.quantity + deletedProduct.price);
            productList = productList.filter(product => product.productId !== productDeleId);      
            console.log(productList); 
            }                    
        });
        console.log(productList + " after delete");
    }
</script>